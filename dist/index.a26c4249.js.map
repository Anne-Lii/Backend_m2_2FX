{"mappings":"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","sources":["<anon>","src/js/main.js"],"sourcesContent":["(function () {\nvar $089c40fcbb903d20$exports = {};\n//code written by Anne-Lii Hansen VT 2024\n\"use strict\";\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    getData(); //get jobs from API\n    //get element from HTML\n    const jobList = document.getElementById(\"jobList\");\n    const addForm = document.getElementById(\"addForm\");\n    //async/await function\n    async function getData() {\n        const url = \" https://backend-moment2-1-oqoy.onrender.com/api/work\";\n        const options = {\n            method: \"GET\"\n        };\n        try {\n            const response = await fetch(url, options); //await response from fetch\n            if (!response.ok) throw new Error(`API responded with status: ${response.status}`);\n            const result = await response.json(); //konvert response to javascript      \n            //sort enddate on jobs\n            result.sort((a, b)=>{\n                if (a.enddate && b.enddate) return new Date(b.enddate) - new Date(a.enddate);\n                else if (a.enddate) return -1;\n                else if (b.enddate) return 1;\n                return 0;\n            });\n            if (jobList) {\n                jobList.innerHTML = \"\"; //clear joblist\n                result.forEach((job)=>{\n                    const listItem = document.createElement(\"li\");\n                    // add ID based on job ID\n                    listItem.id = `job-${job.id}`;\n                    listItem.innerHTML = `\r\n                        <h3>${job.jobtitle}</h3>\r\n                        <p><strong>F\\xf6retag:</strong> ${job.companyname}</p>\r\n                        <p><strong>Ort:</strong> ${job.location}</p>\r\n                        <p><strong>Startdatum:</strong> ${job.startdate ? job.startdate.split(\"T\")[0] : \"Ej angivet\"}</p>\r\n                        <p><strong>Slutdatum:</strong> ${job.enddate ? job.enddate.split(\"T\")[0] : \"P\\xe5g\\xe5ende\"}</p>\r\n                        <p><strong>Beskrivning:</strong> ${job.description}</p><br>\r\n                        <button class=\"removeBtn\" data-job-id=\"${job.id}\">Ta bort jobb</button>\r\n                        `;\n                    jobList.appendChild(listItem);\n                    //event for remove-button to remove specific job\n                    const removeBtn = listItem.querySelector(\".removeBtn\");\n                    if (removeBtn) removeBtn.addEventListener(\"click\", function(event) {\n                        const jobId = event.currentTarget.dataset.jobId;\n                        //call function to remove job from database and send with JobId\n                        removeJob(jobId);\n                    });\n                });\n            }\n        } catch (err) {\n            console.error(\"Det uppstod ett fel:\", err);\n        }\n    }\n    //event when submiting form\n    if (addForm) addForm.addEventListener(\"submit\", function(event) {\n        event.preventDefault();\n        const formData = new FormData(addForm);\n        //remove validation messages\n        const errorElements = addForm.querySelectorAll(\".error-message\");\n        errorElements.forEach((el)=>el.remove());\n        // validate input from form\n        const errors = validateForm(formData);\n        if (Object.keys(errors).length > 0) {\n            // show validation message\n            Object.keys(errors).forEach((field)=>{\n                const input = addForm.querySelector(`[name=${field}]`);\n                const errorElement = document.createElement(\"div\");\n                errorElement.classList.add(\"error-message\");\n                errorElement.textContent = errors[field];\n                // add error message after input\n                input.parentNode.insertBefore(errorElement, input.nextSibling);\n                //remove validation message when writing in input\n                input.addEventListener(\"input\", function() {\n                    errorElement.remove();\n                });\n            });\n            return; // return if form is not valid\n        }\n        const jobData = {\n            jobtitle: formData.get(\"jobtitle\"),\n            companyname: formData.get(\"companyname\"),\n            location: formData.get(\"location\"),\n            startdate: formData.get(\"startdate\"),\n            enddate: formData.get(\"enddate\"),\n            description: formData.get(\"description\")\n        };\n        addJob(jobData);\n    });\n    function validateForm(formData) {\n        const errors = {};\n        // validate all inputs\n        if (!formData.get(\"companyname\")) errors.companyname = \"Fyll i f\\xf6retagsnamn!\";\n        if (!formData.get(\"location\")) errors.location = \"Fyll i ort!\";\n        if (!formData.get(\"jobtitle\")) errors.jobtitle = \"Fyll i titel!\";\n        if (!formData.get(\"description\")) errors.description = \"Fyll i beskrivning!\";\n        if (!formData.get(\"startdate\")) errors.startdate = \"Fyll i startdatum!\";\n        return errors;\n    }\n    //function to remove job\n    async function removeJob(jobId) {\n        const url = `https://backend-moment2-1-oqoy.onrender.com/api/work/${jobId}`;\n        const options = {\n            method: \"DELETE\"\n        };\n        try {\n            const response = await fetch(url, options);\n            if (response.ok) {\n                const listItem = document.getElementById(`job-${jobId}`);\n                listItem.remove();\n            }\n        } catch (error) {\n            console.error(\"Det uppstod ett fel:\", error);\n        }\n    }\n    //function to add job\n    async function addJob(jobData) {\n        const url = \"https://backend-moment2-1-oqoy.onrender.com/api/work\";\n        const options = {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(jobData)\n        };\n        try {\n            const response = await fetch(url, options);\n            if (response.ok) {\n                await response.json();\n                // Återställ formuläret\n                addForm.reset();\n                //redirect to index.html\n                window.location.href = \"index.html\";\n            }\n        } catch (error) {\n            console.error(\"Det uppstod ett fel:\", error);\n        }\n    }\n});\n\n})();\n//# sourceMappingURL=index.a26c4249.js.map\n","//code written by Anne-Lii Hansen VT 2024\r\n\"use strict\"\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n\r\n    getData(); //get jobs from API\r\n\r\n    //get element from HTML\r\n    const jobList = document.getElementById(\"jobList\");\r\n    const addForm = document.getElementById(\"addForm\");\r\n\r\n    //async/await function\r\n    async function getData() {\r\n\r\n        const url = \" https://backend-moment2-1-oqoy.onrender.com/api/work\";\r\n\r\n        const options = {\r\n            method: 'GET'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, options);//await response from fetch\r\n            if (!response.ok) {\r\n                throw new Error(`API responded with status: ${response.status}`);\r\n            }\r\n            const result = await response.json();//konvert response to javascript      \r\n\r\n            //sort enddate on jobs\r\n            result.sort((a,b) => {\r\n                if (a.enddate && b.enddate) {\r\n                    return new Date (b.enddate) - new Date (a.enddate);\r\n                } else if (a.enddate) {\r\n                    return -1;\r\n                } else if (b.enddate) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n                \r\n            });\r\n\r\n            if (jobList) {\r\n                jobList.innerHTML = \"\"; //clear joblist\r\n                result.forEach(job => {\r\n                    const listItem = document.createElement(\"li\");\r\n\r\n                    // add ID based on job ID\r\n                    listItem.id = `job-${job.id}`;\r\n\r\n                    listItem.innerHTML = `\r\n                        <h3>${job.jobtitle}</h3>\r\n                        <p><strong>Företag:</strong> ${job.companyname}</p>\r\n                        <p><strong>Ort:</strong> ${job.location}</p>\r\n                        <p><strong>Startdatum:</strong> ${job.startdate ? job.startdate.split('T')[0] : \"Ej angivet\"}</p>\r\n                        <p><strong>Slutdatum:</strong> ${job.enddate ? job.enddate.split(\"T\")[0] : \"Pågående\"}</p>\r\n                        <p><strong>Beskrivning:</strong> ${job.description}</p><br>\r\n                        <button class=\"removeBtn\" data-job-id=\"${job.id}\">Ta bort jobb</button>\r\n                        `;\r\n                    jobList.appendChild(listItem);\r\n\r\n                    //event for remove-button to remove specific job\r\n                    const removeBtn = listItem.querySelector(\".removeBtn\");\r\n\r\n                    if (removeBtn) {\r\n                        removeBtn.addEventListener(\"click\", function (event) {\r\n                            const jobId = event.currentTarget.dataset.jobId;\r\n                            //call function to remove job from database and send with JobId\r\n                            removeJob(jobId);\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error('Det uppstod ett fel:', err);\r\n        }\r\n    }\r\n\r\n    //event when submiting form\r\n    if (addForm) {\r\n        addForm.addEventListener(\"submit\", function (event) {\r\n            event.preventDefault();\r\n\r\n            const formData = new FormData(addForm);\r\n\r\n            //remove validation messages\r\n            const errorElements = addForm.querySelectorAll(\".error-message\");\r\n            errorElements.forEach(el => el.remove());\r\n\r\n            // validate input from form\r\n            const errors = validateForm(formData);\r\n            if (Object.keys(errors).length > 0) {\r\n\r\n                // show validation message\r\n                Object.keys(errors).forEach(field => {\r\n                    const input = addForm.querySelector(`[name=${field}]`);\r\n                    const errorElement = document.createElement(\"div\");\r\n                    errorElement.classList.add(\"error-message\");\r\n                    errorElement.textContent = errors[field];\r\n\r\n                    // add error message after input\r\n                    input.parentNode.insertBefore(errorElement, input.nextSibling);\r\n\r\n                    //remove validation message when writing in input\r\n                    input.addEventListener(\"input\", function () {\r\n                        errorElement.remove();\r\n                    });\r\n                });\r\n                return; // return if form is not valid\r\n            }\r\n\r\n            const jobData = {\r\n                jobtitle: formData.get(\"jobtitle\"),\r\n                companyname: formData.get(\"companyname\"),\r\n                location: formData.get(\"location\"),\r\n                startdate: formData.get(\"startdate\"),\r\n                enddate: formData.get(\"enddate\"),\r\n                description: formData.get(\"description\")\r\n            };\r\n\r\n            addJob(jobData);\r\n        });\r\n    }\r\n\r\n\r\n    function validateForm(formData) {\r\n        const errors = {};\r\n\r\n        // validate all inputs\r\n        if (!formData.get(\"companyname\")) {\r\n            errors.companyname = \"Fyll i företagsnamn!\";\r\n        }\r\n\r\n        if (!formData.get(\"location\")) {\r\n            errors.location = \"Fyll i ort!\";\r\n        }\r\n\r\n        if (!formData.get(\"jobtitle\")) {\r\n            errors.jobtitle = \"Fyll i titel!\";\r\n        }\r\n\r\n        if (!formData.get(\"description\")) {\r\n            errors.description = \"Fyll i beskrivning!\";\r\n        }\r\n\r\n        if (!formData.get(\"startdate\")) {\r\n            errors.startdate = \"Fyll i startdatum!\";\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    //function to remove job\r\n    async function removeJob(jobId) {\r\n        const url = `https://backend-moment2-1-oqoy.onrender.com/api/work/${jobId}`;\r\n        const options = {\r\n            method: 'DELETE'\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, options);\r\n            if (response.ok) {\r\n                const listItem = document.getElementById(`job-${jobId}`);\r\n                listItem.remove();\r\n            }\r\n        } catch (error) {\r\n            console.error('Det uppstod ett fel:', error);\r\n        }\r\n    }\r\n\r\n    //function to add job\r\n    async function addJob(jobData) {\r\n        const url = \"https://backend-moment2-1-oqoy.onrender.com/api/work\";\r\n        const options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(jobData)\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, options);\r\n            if (response.ok) {\r\n                await response.json();\r\n\r\n                // Återställ formuläret\r\n                addForm.reset();\r\n\r\n                //redirect to index.html\r\n                window.location.href = \"index.html\";\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Det uppstod ett fel:\", error);\r\n        }\r\n    }\r\n\r\n});\r\n"],"names":["document","addEventListener","getData","jobList","getElementById","addForm","response","fetch","method","ok","Error","status","result","json","sort","a","b","enddate","Date","innerHTML","forEach","job","listItem","createElement","id","jobtitle","companyname","location","startdate","split","description","appendChild","removeBtn","querySelector","event","jobId","currentTarget","dataset","removeJob","err","console","error","url","remove","addJob","jobData","options","headers","body","JSON","stringify","reset","window","href","preventDefault","formData","FormData","errorElements","querySelectorAll","el","errors","validateForm","get","Object","keys","length","field","input","errorElement","classList","add","textContent","parentNode","insertBefore","nextSibling"],"version":3,"file":"index.a26c4249.js.map"}